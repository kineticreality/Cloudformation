{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Creates a standalone Artifactory Server.",

  "Parameters" : {

    "AMIImage" : {
      "Default": "ami-c11856fb",
      "Description": "AMI ImageID",
      "Type": "String"
    },

	"ArtifactoryFQDN" : {
	"Default": "artifactory.server.domain",
	"Description" : "Artifactory Server URL, used for Nginx configuration",
	"Type": "String"
	},

	"ChefDKRPM" : {
    "Description" : "ChefDK RPM Package",
    "Type" : "String",
	"Default" : "chefdk-0.6.2-1.el7.x86_64.rpm",
	"ConstraintDescription": "Must be file.rpm"
    },

	"ChefDKUrl" : {
    "Description" : "Download URL for ChefDK",
    "Type" : "String",
	"Default" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/7/x86_64/",
	"ConstraintDescription": "Must be https://url/to/ this is installed using RPM"
    },

	"InstanceType" : {
	"Default" : "t2.medium",
	"Type" : "String"
	},

    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Default": "Keypair-Name",
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "SecurityGroupIDS": {
        "Description": "Security Group IDs within VPC",
        "Default": "security-group-id",
        "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },

    "SubnetID": {
        "Description": "Subnet Range within VPC",
        "Default": "subnet-id",
        "Type": "AWS::EC2::Subnet::Id"
    },

    "VPCID": {
      "Default": "vpc-id",
      "Description": "Destination VPC",
      "Type": "AWS::EC2::VPC::Id"
    }
  },

  "Mappings" : {
    "S3RegionToEndpoint" : {
      "us-east-1"        : { "endpoint" : "s3.amazonaws.com" },
      "us-west-2"        : { "endpoint" : "s3-us-west-2.amazonaws.com" },
      "us-west-1"        : { "endpoint" : "s3-us-west-1.amazonaws.com" },
      "eu-west-1"        : { "endpoint" : "s3-eu-west-1.amazonaws.com" },
      "eu-central-1"     : { "endpoint" : "s3-eu-central-1.amazonaws.com" },
      "ap-southeast-1"   : { "endpoint" : "s3-ap-southeast-1.amazonaws.com" },
      "ap-southeast-2"   : { "endpoint" : "s3-ap-southeast-2.amazonaws.com" },
      "ap-northeast-1"   : { "endpoint" : "s3-ap-northeast-1.amazonaws.com" },
      "sa-east-1"        : { "endpoint" : "s3-sa-east-1.amazonaws.com" }
    }
  },

  "Resources" : {

       "CfnUser" : {
          "Type" : "AWS::IAM::User",
          "Properties" : {
            "Path": "/",
            "Policies": [ {
              "PolicyName": "root",
              "PolicyDocument": { "Statement": [ {
                "Effect":"Allow",
                "Action":"cloudformation:DescribeStackResource",
                "Resource":"*"
              } ] }
            } ]
          }
        },

        "AccessKey" : {
          "Type" : "AWS::IAM::AccessKey",
          "Properties" : {
            "UserName" : { "Ref" : "CfnUser" }
          }
        },


	"ArtifactoryVolume01" : {
                          "Type" : "AWS::EC2::Volume",
                          "Properties" : {
                          "Size" : "10",
                          "VolumeType" : "standard",
                          "Encrypted" : "true",
                          "AvailabilityZone" : { "Fn::GetAtt" : [ "ArtifactoryServer", "AvailabilityZone" ] },
                          "Tags" : [ {
                          "Key" : "Name",
                          "Value" : "ArtifactoryDataVolume"
                          } ]
                      },
                          "DeletionPolicy" : "Snapshot"
                 },

	"MountPoint01" : {
   "Type" : "AWS::EC2::VolumeAttachment",
   "Properties" : {
      "InstanceId" : { "Ref" : "ArtifactoryServer" },
      "VolumeId"  : { "Ref" : "ArtifactoryVolume01" },
      "Device" : "/dev/sdh"
   }
},     
   

      "ArtifactoryServer" : {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Artifactory Server",

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "ntp"      : [],
                "crontabs" : [],
                "git"      : [],
                "freetype" : [],
                "libpng"   : [],
                "wget"     : [],
                "htop"     : [],
                "nginx"    : [],
                "curl"     : []
              }
            },
            "files": {
                "/etc/nginx/nginx.conf" : {
                "content": { "Fn::Join" : ["", [
                 "user  nginx;\n",
                 "worker_processes  auto;\n",
                 "error_log  /var/log/nginx/error.log;\n",
                 "pid        /var/run/nginx.pid;\n",
                 "\n",
                 "events {\n",
                    " worker_connections 1024;\n",
                 "}\n",
                 "\n",
                 "http {\n",
                 "    include         /etc/nginx/mime.types;\n",
                 "    default_type    application/octet-stream;\n",
                 "\n",
                 "    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n",
                 "                      '$status $body_bytes_sent \"$http_referer\" '\n",
                 "                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n",
                 "\n",
                 "    access_log  /var/log/nginx/access.log  main;\n",
                 "\n",
                 "    sendfile            on;\n",
                 "    tcp_nopush          on;\n",
                 "    tcp_nodelay         on;\n",
                 "\n",
                 "    keepalive_timeout   65;\n",
                 "    types_hash_max_size 2048;\n",
                 "    gzip on;\n",
                 "\n",
                 "    include /etc/nginx/conf.d/*.conf;\n",
                 "\n",
                 "    index   index.html index.htm;\n",
                 "\n",
                 "    server {\n",
                 "        listen       80;\n",
                 "        server_name  localhost;\n",
                 "        root         /usr/share/nginx/html;\n",
                 "\n",
                 "        #charset koi8-r;\n",
                 "\n",
                 "        access_log  /var/log/nginx/host.access.log  main;\n",
                 "\n",
                 "### Add domain rewrite from HTTP to HTTPS ###\n",
                 "        location / {\n",
                 "          rewrite     ^(.*)   https://servername.domain.name$1 permanent;\n",
                 "        }\n",
                 "\n",
                 "        # redirect server error pages to the static page /40x.html\n",
                 "        #\n",
                 "        error_page 404 /404.html;\n",
                 "        location = /40x.html {\n",
                 "        }\n",
                 "\n",
                 "        # redirect server error pages to the static page /50x.html\n",
                 "        #\n",
                 "        error_page 500 502 503 504 /50x.html;\n",
                 "        location = /50x.html {\n",
                 "        }\n",
                 "\n",
                 "\n",
                 "    }\n",
                 "\n",     
                 "}\n"
                 
                 
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
	          "/etc/nginx/conf.d/artifactory.conf" : {
                "content": { "Fn::Join" : ["", [
                  " upstream artifactory {\n",
                 "    server localhost:8081;\n",
                 "}\n",
                 "\n",
                 "server {\n",
                 "    listen 443 ssl;\n",
                 "    server_name ", { "Ref" : "ArtifactoryFQDN" },"; \n",
                 "    \n",
                 "    ssl on;\n",
                 "    ssl_certificate         /etc/nginx/ssl/",{ "Ref" : "ArtifactoryFQDN" },".crt;\n",
                 "    ssl_certificate_key     /etc/nginx/ssl/",{ "Ref" : "ArtifactoryFQDN" },".key;\n",
                 "   #ssl_trusted_certificate /etc/nginx/ssl/",{ "Ref" : "ArtifactoryFQDN" },".pem;\n",
                 "\n",
                 "    ssl_session_cache shared:SSL:20m;\n",
                 "    ssl_session_timeout 10m;\n",
                 "\n",
                 "    ssl_prefer_server_ciphers       on;\n",
                 "    ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;\n",
                 "    ssl_ciphers                     ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n",
                 "\n",
                 "    add_header Strict-Transport-Security \"max-age=31536000\";\n",
                 "\n",
                 "    location / {\n",
                 "        proxy_pass http://artifactory;\n",
                 "        proxy_set_header Host $host;\n",
                 "        proxy_set_header X-Real-IP $remote_addr;\n",
                 "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
                 "        proxy_set_header X-Forwarded-Proto $scheme;\n",
                 "    }\n",
                 "}\n"
                 
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
	          "/etc/chef/solo.rb" : {
                "content": { "Fn::Join" : ["", [
                  "cookbook_path [\n'/var/chef/cookbooks'\n]\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
	          "/tmp/certgen.sh" : {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                 "domain=",{ "Ref" : "ArtifactoryFQDN" },"\n",
				 "commonname=$domain\n",
				 "organization=artifactory.server\n",
				 "organizationalunit=IT\n",
				 "email=administrator@localhost\n",
				 "password=dummypassword\n",
				 "echo \"Generating key request for $domain\" \n",
				 "openssl genrsa -des3 -passout pass:$password -out /etc/nginx/ssl/$domain.key 2048 -noout\n",
				 "openssl rsa -in /etc/nginx/ssl/$domain.key -passin pass:$password -out /etc/nginx/ssl/$domain.key \n",
				 "openssl req -new -key /etc/nginx/ssl/$domain.key -out /etc/nginx/ssl/$domain.csr -passin pass:$password  -subj \"/C=$country/ST=$state/L=$locality/O=$organization/OU=$organizationalunit/CN=$commonname/emailAddress=$email\" \n",
				 "openssl x509 -req -days 365 -in /etc/nginx/ssl/$domain.csr -signkey /etc/nginx/ssl/$domain.key -out /etc/nginx/ssl/$domain.crt \n",
				 "exit 0 \n",
                 "\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "ntpd": {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId"          : {"Ref" : "AMIImage"},
        "InstanceType"     : {"Ref" : "InstanceType"},
        "KeyName"          : { "Ref" : "KeyName" },
        "NetworkInterfaces": [{
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": { "Ref": "SecurityGroupIDS" },
            "SubnetId": { "Ref": "SubnetID" }
        }],
        "UserData"         : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "PUBLIC_DNS=`(curl http://169.254.169.254/latest/meta-data/public-hostname)`\n",
          "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n",
          "SHORTNAME=`(echo $PUBLIC_DNS | cut -d \".\" -f1)`\n",
          "export HOME=\/root\n",

          "## Mount and Format EBS Volume\n",
          "while [ ! -e /dev/xvdh ]; do echo waiting for /dev/xvdh to attach; sleep 10; done\n",
          "mkfs.ext4 /dev/xvdh\n",
          "mount /dev/xvdh /var/opt\n",
          "echo \"/dev/xvdh /var/opt ext4 defaults,nofail 0 2\" >> /etc/fstab\n",
          "yum -y update\n",
          "echo DEBUG-1 >> /var/log/cfn-init-debug.log\n",
          "yum -y install ", { "Ref" : "ChefDKUrl" },{ "Ref" : "ChefDKRPM" }, "\n",
          "mkdir -p /etc/chef/\n",
          "mkdir -p /var/chef/cookbooks\n",
          "mkdir -p /etc/nginx/conf.d/\n",
          "mkdir -p /etc/nginx/ssl\n",
          "yum -y install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
          "export PATH=$PATH:/opt/aws/bin\n",
          "cfn-init --region ", { "Ref" : "AWS::Region" },
          "    -v -s ", { "Ref" : "AWS::StackName" }, " -r ArtifactoryServer ",
          "         --access-key ", { "Ref" : "AccessKey" },
          "         --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
          "         --region     ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",
          "echo DEBUG-2 >> /var/log/cfn-init-debug.log\n",
		  "chmod +x /tmp/certgen.sh\n",
          "sh /tmp/certgen.sh\n",
          "## Configure Chef Solo Cookbooks\n",
          "git config --global user.email chef@localhost.local\n",
          "git init /var/chef\n",
          "touch /var/chef/init\n",
          "cd /var/chef;git add .\n",
          "git commit -a -m init  \n",
          "knife cookbook site install java  \n",
          "wget https://raw.githubusercontent.com/kineticreality/Cloudformation/master/Artifactory/java-cookbook-default.rb -O /var/chef/cookbooks/java/attributes/default.rb\n",
          "wget https://raw.githubusercontent.com/kineticreality/Cloudformation/master/Artifactory/artifactory-runlist.json -O /etc/chef/runlist.json\n",
          "chef-solo -j /etc/chef/runlist.json \n",
          "wget https://bintray.com/jfrog/artifactory-pro-rpms/rpm -O /etc/yum.repos.d/rebintray-jfrog-artifactory-pro-rpms.repo\n",
          "yum -y install jfrog-artifactory-pro\n",
          "hostname $SHORTNAME\n",
          "echo $PUBLIC_DNS | tee /etc/hostname\n",
          "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n",
          "service nginx start\n",
          "chkconfig nginx on\n",
		  "service artifactory start\n",
         "# If all went well, signal success\n",
          "cfn-signal -e $? -r 'Artifactory Server configuration' '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ArtifactoryServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "600"
      }
    }

   
  },

  "Outputs" : {
    "ArtifactoryServerURL" : {
      "Value" : { "Fn::Join" : ["", ["https://", { "Fn::GetAtt" : [ "ArtifactoryServer", "PublicDnsName" ]}]] },
      "Description" : "URL for newly created Artifactory server"
    }
  }
}
